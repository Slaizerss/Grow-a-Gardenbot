from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token="8164921689:AAGk7wgP3ZZ_mGFOcn_s_fH8GDtwIovaXrY")
dp = Dispatcher()
ADMIN_ID = 6531953933

# –°–ø–∏—Å–æ–∫ –ø–µ—Ç–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
pets = {
    "pet_A": {"name": "ü¶ä –õ–∏—Å–∞", "price": "744T"},
    "pet_B": {"name": "üßü‚Äç‚ôÄÔ∏è –ß–∏–∫–µ–Ω –∑–æ–º–±–∏", "price": "744T"},
    "pet_C": {"name": "üêù –ö–æ—Ä–æ–ª–µ–≤–∞", "price": "744T"},
    "pet_D": {"name": "ü¶üÔ∏è –°—Ç—Ä–µ–∫–æ–∑–∞", "price": "1.5Q"},
    "pet_E": {"name": "ü¶ã –ë–∞–±–æ—á–∫–∞", "price": "1.5Q"},
    "pet_F": {"name": "üêô –û—Å—å–º–∏–Ω–æ–≥", "price": "1.5Q"},
    "pet_G": {"name": "ü¶ù –ï–Ω–æ—Ç", "price": "2.2Q"},
    "pet_H": {"name": "ü¶ñ T-rex", "price": "3Q"}
}


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    waiting_for_review = State()


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç –ø–æ —Å–∫—É–ø–∫–µ –ø–µ—Ç–æ–≤!\n\n'
        '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–¥–µ–ª–∫–∏ —Ö–æ—Ç–µ–ª –±—ã —É—Ç–æ—á–Ω–∏—Ç—å:\n'
        '1. –°–∫—É–ø–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ –ø–µ—Ç—ã, —á—Ç–æ –µ—Å—Ç—å –≤ –ø—Ä–∞–π—Å–µ.\n'
        '2. –í —Å–¥–µ–ª–∫–µ –≤—ã –∏–¥—ë—Ç–µ –ø–µ—Ä–≤—ã–º–∏ ‚Äî –Ω–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –≤—Ä–µ–º—è –Ω–µ —Ç—Ä–∞—á—É.\n\n'
        '–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–¥–µ–ª–∞–Ω—ã —Ä–∞–¥–∏ –±—ã—Å—Ç—Ä—ã—Ö —Å–¥–µ–ª–æ–∫.\n\n'
        '–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.'
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å", callback_data="agree")]
    ])
    await message.answer(text, reply_markup=markup)


# –ú–µ–Ω—é –ø–∏—Ç–æ–º—Ü–µ–≤
@dp.callback_query(F.data == "agree")
async def agree_handler(callback: types.CallbackQuery):
    await callback.answer()

    buttons = []
    for code, pet in pets.items():
        label = f"{pet['name']} ‚Äî {pet['price']}"
        buttons.append([InlineKeyboardButton(text=label, callback_data=code)])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        '–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∞–≤–∏–ª–∞. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å üòä\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:',
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ç–∞
@dp.callback_query(F.data.in_(pets.keys()))
async def pet_handler(callback: types.CallbackQuery):
    await callback.answer()
    pet = pets[callback.data]

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑!", callback_data="accept")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]
    ])

    await callback.message.edit_text(
        f"–Ø —Å–æ–æ–±—â—É –æ –≤–∞—à–µ–º –≤—ã–±–æ—Ä–µ –°–∫—É–ø—â–∏–∫—É @Slaizers, –∏ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç, –æ–Ω –∑–∞–π–¥—ë—Ç\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {pet['name']}. –í—ã –ø–æ–ª—É—á–∏—Ç–µ {pet['price']} —à–µ–∫–µ–ª–µ–π.\n"
        f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤ –¥—Ä—É–∑—å—è –ø–æ –Ω–∏–∫—É: *Slaizers_KaneKi*\n'
        f'–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://www.roblox.com/share?code=342c3f402c85fb4fbbee31eb5c4e0672&type=Server',
        reply_markup=markup,
        parse_mode="Markdown"
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    user = callback.from_user
    try:
        await bot.send_message(
            ADMIN_ID,
            f"üë§ @{user.username or user.first_name} –≤—ã–±—Ä–∞–ª: {pet['name']} ‚Äî {pet['price']}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")


# –ö–Ω–æ–ø–∫–∞ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
@dp.callback_query(F.data == "accept")
async def accept_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–¥–µ–ª–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–∑—ã–≤.\n'
        '–Ω–∞–ø—Ä–∏–º–µ—Ä: @Slaizers, –≤—Å—ë –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ'
    )
    await state.set_state(Form.waiting_for_review)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
@dp.message(Form.waiting_for_review)
async def process_review(message: types.Message, state: FSMContext):
    user = message.from_user
    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n"
            f"{message.text}"
        )
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    finally:
        await state.clear()


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_list")
async def back_handler(callback: types.CallbackQuery):
    await callback.answer()

    buttons = []
    for code, pet in pets.items():
        label = f"{pet['name']} ‚Äî {pet['price']}"
        buttons.append([InlineKeyboardButton(text=label, callback_data=code)])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:',
        reply_markup=markup
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())